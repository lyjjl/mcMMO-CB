# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  release:
    types: [created]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      # packages: write # 不需要发布到 GitHub Packages，所以可以移除此权限

    steps:
    - uses: actions/checkout@v4

    # 1. 设置 JDK 21
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21' # 确保这里是 '21'
        distribution: 'temurin'
        # server-id 和 settings-path 可以移除，因为我们不发布到 GitHub Packages
        # server-id: github
        # settings-path: ${{ github.workspace }}

    - name: Build with Maven
      # mcMMO 的 pom.xml 使用 maven-assembly-plugin，其 goals 配置为 single。
      # 正常情况下，`mvn package` 就能触发 assembly 插件的 execution。
      # 如果仅仅 `mvn package` 没有生成预期的 JAR，可以尝试 `mvn clean install`。
      run: mvn -B clean package --file pom.xml

    # 2. 移除发布到 GitHub Packages 的步骤 (如果之前有的话)
    # 你提供的原始配置中没有这一步，很好。

    # 3. 添加将构建产物上传到 GitHub Release 的步骤
    - name: Upload mcMMO Plugin to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用内置的 GITHUB_TOKEN
      with:
        upload_url: ${{ github.event.release.upload_url }} # 获取 Release 的上传 URL
      
        asset_path: ./target/mcMMO.jar # 根据 mcMMO 的实际输出文件名进行调整
        asset_name: mcMMO-${{ github.event.release.tag_name }}.jar # 建议的命名方式：插件名-版本号.jar
        asset_content_type: application/java-archive # JAR 文件的 MIME 类型
